name: Build, Push and Deploy on Scaleway

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Corrig√© : version stable de Node.js

      - name: Build backend
        working-directory: ./back
        run: npm install

      - name: Build frontend
        working-directory: ./front
        run: |
          npm install
          npm run build

      - name: Login to Scaleway registry
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        run: |
          echo "$SCW_SECRET_KEY" | docker login rg.fr-par.scw.cloud -u "$SCW_ACCESS_KEY" --password-stdin

      - name: Build Docker image for API
        run: docker build -t rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-api:latest ./back

      - name: Build Docker image for Web
        run: docker build -t rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-web:latest ./front

      - name: Push Docker images to Scaleway registry
        run: |
          docker push rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-api:latest
          docker push rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-web:latest

      - name: Install Scaleway CLI and jq
        run: |
          curl -L -o scw https://github.com/scaleway/scaleway-cli/releases/download/v2.16.0/scaleway-cli_2.16.0_linux_amd64
          chmod +x scw
          sudo mv scw /usr/local/bin/scw
          sudo apt-get update && sudo apt-get install -y jq
          scw version

      - name: Check backend container status before deploy
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: 4f182147-90a1-46a7-b7b3-babadf6177b2
          SCW_DEFAULT_REGION: fr-par
        run: |
          echo "üîç V√©rification de l'√©tat du container backend avant d√©ploiement..."
          scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION
          CONTAINER_UUID=$(scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION --format json | jq -r '.[] | select(.name=="devops-dev-api") | .id')
          if [ -n "$CONTAINER_UUID" ]; then
            echo "√âtat du container backend ($CONTAINER_UUID) :"
            scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION
            echo "Logs avant d√©ploiement :"
            scw container container logs "$CONTAINER_UUID" --tail 20
          fi

      - name: Deploy backend container
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: 4f182147-90a1-46a7-b7b3-babadf6177b2
          SCW_DEFAULT_REGION: fr-par
        run: |
          echo "üîç Recherche de l'UUID du container backend devops-dev-api..."
          CONTAINER_UUID=$(scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION --format json | jq -r '.[] | select(.name=="devops-dev-api") | .id')
          echo "UUID trouv√© : '$CONTAINER_UUID'"

          if [ -n "$CONTAINER_UUID" ]; then
            echo "üìã Configuration actuelle du container :"
            scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION

            echo "üöÄ Mise √† jour du container existant..."
            scw container container update "$CONTAINER_UUID" \
              registry-image=rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-api:latest \
              environment-variables.DATABASE_URL="file:./dev.db" \
              environment-variables.JWT_SECRET="secret" \
              environment-variables.BCRYPT_SALT_ROUNDS="10" \
              environment-variables.DEFAULT_ADMIN_PASSWORD="changeme" \
              environment-variables.APP_PORT="3000" \
              min-scale=1 max-scale=1 memory-limit=256 cpu-limit=100

            echo "üîÑ Redeploiement du container backend..."
            scw container container redeploy "$CONTAINER_UUID"

            # Attendre un peu pour que le conteneur d√©marre
            sleep 30

            echo "üîç √âtat du container apr√®s red√©ploiement :"
            scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION
            echo "üìù Logs du container apr√®s red√©ploiement :"
            scw container container logs "$CONTAINER_UUID" --tail 50

            echo "‚úÖ Backend mis √† jour et red√©ploy√© avec succ√®s."
          else
            echo "‚ö†Ô∏è Aucun container existant trouv√©, cr√©ation d'un nouveau container backend..."
            scw container container create \
              name=devops-dev-api \
              namespace-id=$SCW_DEFAULT_PROJECT_ID \
              registry-image=rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-api:latest \
              port=3000 region=$SCW_DEFAULT_REGION \
              environment-variables.DATABASE_URL="file:./dev.db" \
              environment-variables.JWT_SECRET="secret" \
              environment-variables.BCRYPT_SALT_ROUNDS="10" \
              environment-variables.DEFAULT_ADMIN_PASSWORD="changeme" \
              environment-variables.APP_PORT="3000" \
              min-scale=1 max-scale=1 memory-limit=256 cpu-limit=100

            echo "‚è≥ Attente pour que le nouveau conteneur d√©marre..."
            sleep 30

            CONTAINER_UUID=$(scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION --format json | jq -r '.[] | select(.name=="devops-dev-api") | .id')
            echo "üîç √âtat du nouveau container :"
            scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION
            echo "üìù Logs du nouveau container :"
            scw container container logs "$CONTAINER_UUID" --tail 50

            echo "‚úÖ Nouveau container backend cr√©√©."
          fi

      - name: Verify backend deployment
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: 4f182147-90a1-46a7-b7b3-babadf6177b2
          SCW_DEFAULT_REGION: fr-par
        run: |
          echo "üîç V√©rification finale de l'√©tat du container backend..."
          CONTAINER_UUID=$(scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION --format json | jq -r '.[] | select(.name=="devops-dev-api") | .id')
          if [ -n "$CONTAINER_UUID" ]; then
            echo "√âtat du container backend :"
            scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION
            echo "Logs du container backend :"
            scw container container logs "$CONTAINER_UUID" --tail 50

            # V√©rifier si le conteneur est en cours d'ex√©cution
            STATUS=$(scw container container describe "$CONTAINER_UUID" region=$SCW_DEFAULT_REGION --format json | jq -r '.status')
            if [ "$STATUS" != "running" ]; then
              echo "‚ùå Le conteneur backend n'est pas en cours d'ex√©cution. √âtat: $STATUS"
              exit 1
            else
              echo "‚úÖ Le conteneur backend est en cours d'ex√©cution."
            fi
          else
            echo "‚ùå Aucun conteneur backend trouv√©."
            exit 1
          fi

      - name: Deploy frontend container
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: 4f182147-90a1-46a7-b7b3-babadf6177b2
          SCW_DEFAULT_ORGANIZATION_ID: 909c2e48-12fc-47bf-b8ef-360a60b07500
          SCW_DEFAULT_REGION: fr-par
        run: |
          echo "üîç Recherche de l'UUID du container frontend devops-dev-web..."
          CONTAINER_UUID=$(scw container container list namespace-id=$SCW_DEFAULT_PROJECT_ID region=$SCW_DEFAULT_REGION --format json | jq -r '.[] | select(.name=="devops-dev-web") | .id')
          echo "UUID trouv√© : '$CONTAINER_UUID'"
          if [ -n "$CONTAINER_UUID" ]; then
            echo "üöÄ Mise √† jour du container frontend existant..."
            scw container container update "$CONTAINER_UUID" \
              registry-image=rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-web:latest \
              environment-variables.VITE_API_URL="https://nslaldyadanbxh6co34-devops-dev-api.functions.fnc.fr-par.scw.cloud" \
              min-scale=1 max-scale=1 memory-limit=256 cpu-limit=100
            echo "üîÑ Redeploiement du container frontend..."
            scw container container redeploy "$CONTAINER_UUID"
            echo "‚úÖ Frontend mis √† jour et red√©ploy√© avec succ√®s."
          else
            echo "‚ö†Ô∏è Aucun container frontend existant trouv√©, cr√©ation d'un nouveau container..."
            scw container container create \
              name=devops-dev-web \
              namespace-id=$SCW_DEFAULT_PROJECT_ID \
              registry-image=rg.fr-par.scw.cloud/namespace-laldy-adan/devops-dev-web:latest \
              port=80 region=$SCW_DEFAULT_REGION \
              environment-variables.VITE_API_URL="https://nslaldyadanbxh6co34-devops-dev-api.functions.fnc.fr-par.scw.cloud" \
              min-scale=1 max-scale=1 memory-limit=256 cpu-limit=100
            echo "‚úÖ Nouveau container frontend cr√©√©."
          fi
